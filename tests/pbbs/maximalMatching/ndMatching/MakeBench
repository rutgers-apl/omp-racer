# ********************
# GENERIC MAKEFILE FOR MOST BENCHMARKS THAT LINK
# THE TIMING CODE WITH THE IMPLEMENTATION
# USES FOLLOWING DEFINITIONS
#    BNCHMRK : the name of the benchmark
#    GLOBAL_REQUIRE : implementation files needed from global common
#    BENCH_REQUIRE : implementation files needed from benchmark common
#    LOCAL_REQUIRE : local implementation files 
#    OBJS : implementation object files
#    TIME_GLOBAL_REQUIRE 
#    TIME_REQUIRE : timing files needed from benchmark common
#    PCC : the compiler
#    PCFLAGS : compiler flags
#    PLFLAGS : compiler link flags
# ********************

CHECK = $(BNCHMRK)Check
TIME = $(BNCHMRK)Time
TEST_FILES = testInputs

# Make the benchmark, and make the output check code in the common directory

all : serial openmp-static openmp-dynamic openmp-prof-static openmp-prof-dynamic openmp-race-noinst

serial :
	rm -rf *.o
	cp parallel.h.serpar.static parallel.h
	make serial-r

serial-r : $(BNCHMRK).ser testInputs
	cd ../common; make -s $(CHECK)

openmp-static :
	rm -rf *.o
	cp parallel.h.serpar.static parallel.h
	make openmp-static-r

openmp-static-r : $(BNCHMRK).openmp.static testInputs
	cd ../common; make -s $(CHECK)

openmp-dynamic :
	rm -rf *.o
	cp parallel.h.serpar.dynamic parallel.h
	make openmp-dynamic-r

openmp-dynamic-r : $(BNCHMRK).openmp.dynamic testInputs
	cd ../common; make -s $(CHECK)

openmp-prof-static :
	    rm -rf *.o
	    cp parallel.h.ompp.static parallel.h
	    make openmp-prof-static-r

openmp-prof-static-r : $(BNCHMRK).ompp.static testInputs
	cd ../common; make -s $(CHECK)

openmp-prof-dynamic :
	    rm -rf *.o
	    cp parallel.h.ompp.dynamic parallel.h
	    make openmp-prof-dynamic-r

openmp-prof-dynamic-r : $(BNCHMRK).ompp.dynamic testInputs
	cd ../common; make -s $(CHECK)

openmp-race-noinst :
	    rm -rf *.o
	    cp parallel.h.ompp.dynamic parallel.h
	    make openmp-race-noinst-r

openmp-race-noinst-r : $(BNCHMRK).omprn testInputs
	cd ../common; make -s $(CHECK)

$(TEST_FILES) :
	cp ../common/$@ .

# Files copied (linked) from toplevel common directory
# The sort used to remove duplicates
GLOBAL = $(sort $(TIME_GLOBAL_REQUIRE) $(GLOBAL_REQUIRE))

$(GLOBAL) :
	ln -s ../../common/$@ .

# Files copied (linked) from benchmark common directory
BENCH = $(TIME).C $(sort $(TIME_REQUIRE) $(BENCH_REQUIRE))

$(BENCH) :
	ln -s ../common/$@ .

# Make all implementation objects
%.o : %.C $(GLOBAL_REQUIRE) $(BENCH_REQUIRE) $(LOCAL_REQUIRE)
	$(PCC) $(PCFLAGS) -c $< -o $@

%.ll : %.C $(GLOBAL_REQUIRE) $(BENCH_REQUIRE) $(LOCAL_REQUIRE)
	$(PCC) $(PCFLAGS) -c $< -o $@

%.bc : %.ll
	$(OPT) $(OPT_FLAGS) < $< > $@

# Make timing code object file
$(TIME).o : $(TIME).C $(TIME_GLOBAL_REQUIRE) $(TIME_REQUIRE)
	$(PCC) $(PCFLAGS) -c $< -o $@ 

# Make benchmark
$(BNCHMRK).ompp.static :  $(TIME).bc $(INTRMEDIATES)
	$(PCC) -o $@ $(TIME).bc $(INTRMEDIATES) $(PLFLAGS) $(LIBS)

#dynamic dr version
$(BNCHMRK).ompp.dynamic : $(TIME).bc $(INTRMEDIATES)
	$(PCC) -o $@ $(TIME).bc $(INTRMEDIATES) $(PLFLAGS) $(LIBS)

# Make benchmark
$(BNCHMRK).omprn : $(TIME).o $(OBJS)
	$(PCC) -o $@ $(TIME).o $(OBJS) $(PLFLAGS) $(LIBS)

# Make benchmark
$(BNCHMRK).openmp.static : $(TIME).o $(OBJS)
	$(PCC) -o $@ $(TIME).o $(OBJS) $(PLFLAGS) $(LIBS)

$(BNCHMRK).openmp.dynamic : $(TIME).o $(OBJS)
	$(PCC) -o $@ $(TIME).o $(OBJS) $(PLFLAGS) $(LIBS)

# Make benchmark
$(BNCHMRK).ser : $(TIME).o $(OBJS)
	$(PCC) -o $@ $(TIME).o $(OBJS) $(PLFLAGS) $(LIBS)

clean :
	rm -f $(BNCHMRK).ompp.static $(BNCHMRK).ompp.dynamic $(BNCHMRK).omprn $(BNCHMRK).ser $(BNCHMRK).openmp.static $(BNCHMRK).openmp.dynamic parallel.h *~ *.o *.pyc *.ll *.bc

cleansrc :
	make -s clean
	rm -f $(GLOBAL) $(BENCH) $(TEST_FILES)

